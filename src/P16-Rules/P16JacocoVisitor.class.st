"
Visit an XML document generated by Jacoco as coverage report
Returns the list of methods covered fully qualified names

The structure of the report is the following:
```
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<!DOCTYPE report PUBLIC ""-//JACOCO//DTD Report 1.1//EN"" ""report.dtd"">
<report name=""corese-core"">
  <sessioninfo id=""caballus-5acd8e76"" start=""1760421605475"" dump=""1760421607367""/>
  <package name=""fr/inria/application"">
    <class name=""fr/inria/application/AClass"" sourcefilename=""aClass.java"">
      <method name=""aMethod1"" ...>
        <counter type=""INSTRUCTION"" missed=""9"" covered=""0""/>
        <counter type=""LINE"" missed=""1"" covered=""0""/>
        <counter type=""COMPLEXITY"" missed=""1"" covered=""0""/>
        <counter type=""METHOD"" missed=""1"" covered=""0""/>
      </method>
      <method name=""aMethod2"" desc=""()Z"" line=""105"">
        <counter type=""INSTRUCTION"" missed=""4"" covered=""0""/>
        <counter type=""LINE"" missed=""1"" covered=""0""/>
        <counter type=""COMPLEXITY"" missed=""1"" covered=""0""/>
        <counter type=""METHOD"" missed=""0"" covered=""1""/>
      </method>
...
```

- The important counter is `METHOD` that must be `covered=""1""`. Above, only aMethod2 is covered.
- Constructors are noted `<method name=""&lt;init&gt;""` (ie. ""<init>"")
- The signature of the method is in the ""desc"" attribute, following the rules of ""name mangling"" (see: [https://en.wikipedia.org/wiki/Name_mangling#Java](https://en.wikipedia.org/wiki/Name_mangling#Java))
"
Class {
	#name : 'P16JacocoVisitor',
	#superclass : 'XMLNodeVisitor',
	#instVars : [
		'parentClass',
		'methods',
		'currentMethod'
	],
	#category : 'P16-Rules-JacocoImporter',
	#package : 'P16-Rules',
	#tag : 'JacocoImporter'
}

{ #category : 'accessing' }
P16JacocoVisitor >> get: aNode attribute: attributeName [

	^aNode attributeAt: attributeName ifAbsent: [ nil ]

]

{ #category : 'visiting' }
P16JacocoVisitor >> visitClass: aClassNode [

	parentClass := self get: aClassNode attribute: 'name'.
	super visitNodeWithElements: aClassNode.
	parentClass := nil
]

{ #category : 'visiting' }
P16JacocoVisitor >> visitCounter: aCounterNode [
	"Inside a method node, check if it is covered:
	 <method name='aMethod1' ...>
        <counter type='METHOD' missed='0' covered='1'/>
	"

	((self get: aCounterNode attribute: 'type') = 'METHOD') ifFalse: [ ^self ].

	((self get: aCounterNode attribute: 'covered') = '1')
		ifTrue: [ methods add: currentMethod ]

]

{ #category : 'visiting' }
P16JacocoVisitor >> visitDocument: aDocumentNode [

	parentClass := nil.
	methods := OrderedCollection new.

	super visitNodeWithElements: aDocumentNode.
	^methods 
]

{ #category : 'visiting' }
P16JacocoVisitor >> visitElement: anElement [

	| selector |
	selector := ('visit' , anElement name capitalized , ':')  asSymbol.
	^ self perform: selector with: anElement
]

{ #category : 'visiting' }
P16JacocoVisitor >> visitMethod: aMethodNode [

	currentMethod := parentClass , '/' , (self get: aMethodNode attribute: 'name').

	super visitNodeWithElements: aMethodNode 
]

{ #category : 'visiting' }
P16JacocoVisitor >> visitPackage: aPackageNode [

	super visitNodeWithElements: aPackageNode 
]

{ #category : 'visiting' }
P16JacocoVisitor >> visitReport: aReportNode [

	super visitNodeWithElements: aReportNode
]

{ #category : 'visiting' }
P16JacocoVisitor >> visitSessioninfo: aNode [

]

{ #category : 'visiting' }
P16JacocoVisitor >> visitSourcefile: aXMLElement [ 
]
